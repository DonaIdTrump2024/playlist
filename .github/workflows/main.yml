name: Update M3U and EPG File

on:
  workflow_dispatch:
  schedule:
    - cron: '0 5,8,11,14,17 * * *'

jobs:
  update_m3u:
    runs-on: ubuntu-latest

    steps:    
      - name: Checkout repository
        uses: actions/checkout@master
        with:
          fetch-depth: 0
      
      - name: Set git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Reset git history
        run: |
          git checkout --orphan temp_branch
          git add -A
          git commit -m "init commit"
          git branch -D main
          git branch -m main
          git push -f origin main

      #- name: Set up WireGuard Connection
        #uses: niklaskeerl/easy-wireguard-action@main
        #with:
          #WG_CONFIG_FILE: ${{ secrets.WG_CONFIG_FILE }}

      - name: Set up Python
        uses: actions/setup-python@master
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests aiohttp streamlink xmltodict

      - name: Run merge script
        env:
          URL1: ${{ secrets.FIRSTPLAYLIST }}
          URL2: ${{ secrets.SECONDPLAYLIST }}
          URL3: ${{ secrets.THIRDPLAYLIST }}
          URL4: ${{ secrets.FOURTHPLAYLIST }}
          URL5: ${{ secrets.FIFTHPLAYLIST }}
          URL6: ${{ secrets.SIXTHPLAYLIST }}
          URL7: ${{ secrets.SEVENTHPLAYLIST }}
        run: python merge_m3u.py $URL1 $URL2 $URL3 $URL4 $URL5 $URL6 $URL7
            
      - name: EPG Grabber
        env:
          EPG1: ${{ secrets.EPG1 }}
          #EPG2: ${{ secrets.EPG2 }}
        run: python epg_grabber.py $EPG1
          
      - name: Upload Artifact 1
        uses: actions/upload-artifact@master
        with:
          name: binary1
          path: tivimate.m3u

      - name: Upload Artifact 2
        uses: actions/upload-artifact@master
        with:
          name: binary2
          path: televizo.m3u

      - name: Upload Artifact 3
        uses: actions/upload-artifact@master
        with:
          name: binary3
          path: myepg.xml.gz

      - name: Set release date
        run: echo "RELEASE_DATE=$(date +%d-%m-%Y)" >> $GITHUB_ENV
  
      - name: Download Artifact 1
        uses: actions/download-artifact@master
        with:
          name: binary1

      - name: Download Artifact 2
        uses: actions/download-artifact@master
        with:
          name: binary2

      - name: Download Artifact 3
        uses: actions/download-artifact@master
        with:
          name: binary3
  
      - name: Delete Existing Release
        id: delete_release
        uses: actions/github-script@master
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const tag = "m3u";
      
            const releases = await github.rest.repos.listReleases({ owner, repo });
            const release = releases.data.find(release => release.tag_name === tag);
      
            if (release) {
              await github.rest.repos.deleteRelease({ owner, repo, release_id: release.id });
              console.log(`Deleted release with ID ${release.id}`);
            } else {
              console.log("No existing release to delete");
            }
      
            try {
              await github.rest.git.deleteRef({ owner, repo, ref: `tags/${tag}` });
              console.log(`Deleted tag ${tag}`);
            } catch (error) {
              console.error(`Error deleting tag: ${error.message}`);
            }

      - name: Playlist Release
        uses: softprops/action-gh-release@master
        with:
          name: TV Playlist and EPG ${{ env.RELEASE_DATE }}
          tag_name: m3u
          body: |
            **This release has been built by Github Actions**
            [Link to build](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          files: tivimate.m3u, televizo.m3u, myepg.xml.gz
          draft: false
  
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
  
      - name: Find Draft Release
        id: find_draft_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release=$(gh release list --json tagName,isDraft --jq '.[] | select(.isDraft) | .tagName' --limit 1)
          if [ -z "$release" ]; then
            echo "No draft release found."
            echo "release_tag=" >> $GITHUB_ENV
          else
            echo "Draft release found: $release"
            echo "release_tag=$release" >> $GITHUB_ENV
          fi
  
      - name: Publish Draft Release
        if: env.release_tag != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release edit ${{ env.release_tag }} --draft=false

